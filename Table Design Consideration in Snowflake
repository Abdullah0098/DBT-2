Date/Time Data Types for Columns: 
When defining columns to contain dates or timestamps, Snowflake recommends choosing a date or timestamp data type rather than a character data type.
Snowflake stores DATE and TIMESTAMP data more efficiently than VARCHAR, resulting in better query performance

EXAMPLE:
DATE accepts dates in the most common forms (YYYY-MM-DD, DD-MON-YYYY, etc.).

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Referential Integrity Constraints:
Creating a referential constraint to the Primary and Foreign keys so that they can be 
Referential integrity constraints in Snowflake are informational and, with the exception of NOT NULL, not enforced. Constraints other than NOT NULL are created as disabled.
However, constraints provide valuable metadata. The primary keys and foreign keys enable members of your project team to orient themselves to the schema design and familiarize themselves with how the tables relate with one another.
Specify a constraint when creating or modifying a table using the CREATE | ALTER TABLE â€¦ CONSTRAINT commands
In the following example, the CREATE TABLE statement for the second table (salesorders) defines an out-of-line foreign key constraint that references a column in the first table (salespeople):

EXAMPLE:
create or replace table salespeople (
  sp_id int not null unique,
  name varchar default null,
  region varchar,
  constraint pk_sp_id primary key (sp_id)
);
create or replace table salesorders (
  order_id int not null unique,
  quantity int default null,
  description varchar,
  sp_id int not null unique,
  constraint pk_order_id primary key (order_id),
  constraint fk_sp_id foreign key (sp_id)
  references salespeople(sp_id)
);

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
When to Specify Column Lengths:
When you know the exact length of the data that is to be put in column then you should specify the column length
creating columns larger than necessary has minimal impact on the size of data tables. Likewise, there is no query performance difference between a column with
a maximum length declaration (e.g. VARCHAR(16777216)), and a smaller precision.
If the length of the column is less than the desired input data then it will throw errors

EXAMPLE:
create table abc
(
id varchar(4)
)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Storing Semi-structured Data in a VARIANT Column vs. Flattening the Nested Structure:
IF youa re not sure that the data is of which type than it is recommended to be stored in VARIAT column i.e VARCHAR.
It is similar to int and strings. For better pruning and less storage consumption, Snowflake recommends flattening your object and key data into separate relational columns if your semi-structured data includes:
Dates and timestamps, especially non-ISO 8601 dates and timestamps, as string values
Numbers within strings 
Arrays

EXAMPLE:
(F180274) - not just integer neither a string but a combination so to be stored in VARCHAR

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Converting a Permanent Table to a Transient Table or Vice-Versa:

Key differences between transient tables and permanent tables in Snowflake include their persistence, lifespan, and resource utilization.
Permanent tables store data persistently, have a longer lifespan, and consume storage space, while transient tables are temporary, have a shorter lifespan,
and optimize storage usage. 

EXAMPLE:
Currently, it is not possible to change a permanent table to a transient table using the ALTER TABLE command. The TRANSIENT property is set at table creation and cannot be modified.
Similarly, it is not possible to directly change a transient table to a permanent table.
To convert an existing permanent table to a transient table (or vice versa) while preserving data and other characteristics such as column defaults and granted privileges,
you can create a new table and use the COPY GRANTS clause, then copy the data:

-- CREATE TRANSIENT TABLE my_new_table LIKE my_old_table COPY GRANTS;
-- INSERT INTO my_new_table SELECT * FROM my_old_table;
If you want to preserve all of the data, but not the granted privileges and other characteristics, you can use a CREATE TABLE AS SELECT (CTAS), for example:

-- CREATE TRANSIENT TABLE my_transient_table AS SELECT * FROM mytable;
Another way to make a copy of a table (but change the lifecycle from permanent to transient) is to CLONE the table, for example:

-- CREATE TRANSIENT TABLE foo CLONE bar COPY GRANTS;
Old partitions are not be affected (i.e. do not become transient), but new partitions added to the clone will follow the transient lifecycle.

You cannot clone a transient table to a permanent table.












